Project: Movie Recommendation App

// Folder Structure:
// project-root/
// ??? client/ (React Frontend - Vite)
// ?   ??? src/
// ?   ?   ??? components/
// ?   ?   ??? pages/
// ?   ?   ?   ??? Search.jsx
// ?   ?   ??? context/
// ?   ?   ??? utils/
// ?   ?   ?   ??? api.js
// ?   ?   ??? App.jsx
// ?   ?   ??? main.jsx
// ?   ??? .env
// ?   ??? vite.config.js
// ?   ??? package.json
// ??? server/ (Express Backend)
// ?   ??? routes/
// ?   ?   ??? auth.js
// ?   ?   ??? movies.js
// ?   ??? models/
// ?   ?   ??? User.js
// ?   ?   ??? Favorite.js
// ?   ??? middleware/
// ?   ?   ??? authMiddleware.js
// ?   ??? server.js
// ?   ??? .env
// ?   ??? package.json
// ??? README.md

/* === Backend === */

// server/server.js
const express = require('express');
const mongoose = require('mongoose');
const cors = require('cors');
require('dotenv').config();

const authRoutes = require('./routes/auth');
const movieRoutes = require('./routes/movies');

const app = express();
app.use(cors());
app.use(express.json());

app.use('/api/auth', authRoutes);
app.use('/api/movies', movieRoutes);

mongoose.connect(process.env.MONGO_URI)
  .then(() => app.listen(5000, () => console.log('Server running on port 5000')))
  .catch((err) => console.log(err));

// server/routes/auth.js
const express = require('express');
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
const User = require('../models/User');

const router = express.Router();

router.post('/register', async (req, res) => {
  const { email, password } = req.body;
  const hashed = await bcrypt.hash(password, 10);
  const user = new User({ email, password: hashed });
  await user.save();
  res.status(201).json({ message: 'User registered' });
});

router.post('/login', async (req, res) => {
  const { email, password } = req.body;
  const user = await User.findOne({ email });
  if (!user) return res.status(400).json({ error: 'User not found' });
  const match = await bcrypt.compare(password, user.password);
  if (!match) return res.status(400).json({ error: 'Incorrect password' });
  const token = jwt.sign({ id: user._id }, process.env.JWT_SECRET, { expiresIn: '1d' });
  res.json({ token });
});

module.exports = router;

// server/models/User.js
const mongoose = require('mongoose');
const userSchema = new mongoose.Schema({
  email: { type: String, unique: true },
  password: String,
});
module.exports = mongoose.model('User', userSchema);

// server/routes/movies.js
const express = require('express');
const axios = require('axios');
const authMiddleware = require('../middleware/authMiddleware');

const router = express.Router();

router.get('/search', authMiddleware, async (req, res) => {
  const { query } = req.query;
  const response = await axios.get('https://api.themoviedb.org/3/search/movie', {
    params: {
      api_key: process.env.TMDB_API_KEY,
      query,
    }
  });
  res.json(response.data);
});

module.exports = router;

// server/middleware/authMiddleware.js
const jwt = require('jsonwebtoken');

module.exports = (req, res, next) => {
  const authHeader = req.headers['authorization'];
  const token = authHeader && authHeader.split(' ')[1];
  if (!token) return res.status(401).json({ error: 'No token' });

  try {
    const decoded = jwt.verify(token, process.env.JWT_SECRET);
    req.user = decoded;
    next();
  } catch (err) {
    res.status(403).json({ error: 'Invalid token' });
  }
};

/* === Frontend === */

// client/src/utils/api.js
import axios from 'axios';

const API = axios.create({ baseURL: 'https://your-backend-url.com/api' });

API.interceptors.request.use((config) => {
  const token = localStorage.getItem('token');
  if (token) config.headers.Authorization = Bearer ${token};
  return config;
});

export default API;

// client/src/pages/Search.jsx
import React, { useState } from 'react';
import API from '../utils/api';

function Search() {
  const [query, setQuery] = useState('');
  const [results, setResults] = useState([]);

  const searchMovies = async () => {
    try {
      const res = await API.get(/movies/search?query=${query});
      setResults(res.data.results);
    } catch (err) {
      console.error(err);
    }
  };

  return (
    <div>
      <input value={query} onChange={(e) => setQuery(e.target.value)} placeholder="Search Movies" />
      <button onClick={searchMovies}>Search</button>
      <ul>
        {results.map((movie) => (
          <li key={movie.id}>{movie.title}</li>
        ))}
      </ul>
    </div>
  );
}

export default Search;